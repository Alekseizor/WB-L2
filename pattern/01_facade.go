package pattern

import "fmt"

type Delivery struct{}

func (s *Delivery) SaveDelivery() {
	fmt.Println("delivery information is saved")
}

type Items struct{}

func (s *Items) SaveItems() {
	fmt.Println("items information is saved")
}

type Payment struct{}

func (s *Payment) SavePayment() {
	fmt.Println("payment information is saved")
}

type Order struct {
	delivery *Delivery
	items    *Items
	payment  *Payment
}

func NewOrder() *Order {
	return &Order{
		delivery: &Delivery{},
		items:    &Items{},
		payment:  &Payment{},
	}
}

func (f *Order) SaveOrder() {
	f.delivery.SaveDelivery()
	f.payment.SavePayment()
	f.items.SaveItems()
	fmt.Println("order information is saved")
}

//Применимость паттерна Фасад:
//1. Когда необходимо предоставить простой интерфейс для сложной системы.
//2. Когда нужно разделить подсистему на отдельные уровни абстракции
//3. Когда требуется уменьшить зависимости между клиентом и подсистемой.
//Плюсы паттерна Фасад:
//1. Упрощение использования сложной системы. Фасад предоставляет интерфейс, скрывая детали реализации и сложность подсистемы. Это позволяет клиентам использовать систему без необходимости знать все ее внутренности.
//2. Сокрытие деталей реализации. Фасад защищает клиентов от изменений внутренней структуры подсистемы. Если внутренняя рееализация меняется, то достаточно изменить только фасад, не затрагивая клиентский код.
//3. Уменьшение зависимостей. Фасад позволяет уменьшить количество прямых зависимостей между клиентом и подсистемой, что делает систему более гибкой и легко изменяемой.
//Минусы паттерна фасад:
//1. Возможное увеличение сложности фасада. Если подсистема имеет большое количество компонентов и взаимосвязей, то фасад может стать сложным и трудно поддерживаемым.
//2. Ограниченность функциональности. Фасад предоставляет упрощенный интерфейс для работы с подсистемой, но он может быть ограничен в функциональности. Если клиентам требуется более гибкий или специфичный доступ к подсистеме, им может потребоваться обращение к ней напрямую.
//Реальные примеры использования паттерна Фасад:
//1. Маркетплейс, например, работа с заказами
//2. Банковская сфера: какие-либо переводы, личный кабинет
//3. Мессенджеры: отправка сообщений
